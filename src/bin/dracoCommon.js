// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Arg = require("bs-platform/lib/js/arg.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Fs$LidcoreBsNode = require("@lidcore/bs-node/src/fs.js");
var Yaml$LidcoreDraco = require("../bindings/yaml.js");
var Path$LidcoreBsNode = require("@lidcore/bs-node/src/path.js");
var Logger$LidcoreDraco = require("../lib/logger.js");
var Buffer$LidcoreBsNode = require("@lidcore/bs-node/src/buffer.js");
var Process$LidcoreBsNode = require("@lidcore/bs-node/src/process.js");

var stage = ["staging"];

var argc = Process$LidcoreBsNode.argv.length - 1 | 0;

var argv = $$Array.sub(Process$LidcoreBsNode.argv, 1, argc);

var args_000 = /* tuple */[
  "-stage",
  /* Set_string */Block.__(5, [stage]),
  "Set stage"
];

var args = /* :: */[
  args_000,
  /* [] */0
];

try {
  Arg.parse_argv(/* None */0, Process$LidcoreBsNode.argv, args, (function () {
          return /* () */0;
        }), "");
}
catch (raw_exn){
  var exn = Js_exn.internalToOCamlException(raw_exn);
  if (exn[0] !== Arg.Help) {
    if (exn[0] !== Arg.Bad) {
      throw exn;
    }
    
  }
  
}

var usageMsg = ["Usage: draco [mode] [options] [-stage <stage>]"];

function usage(opts) {
  usageMsg[0] = "Usage: draco [mode] " + (String(opts) + " [-stage <stage>]");
  return /* () */0;
}

var cwd = Caml_array.caml_array_get(Process$LidcoreBsNode.argv, 1);

var baseDir = Path$LidcoreBsNode.normalize("" + (String(cwd) + "/../../.."));

var stage$1 = stage[0];

var configPath = "" + (String(baseDir) + ("/config/" + (String(stage$1) + "/draco.yml")));

function config() {
  return Yaml$LidcoreDraco.parse(Buffer$LidcoreBsNode.toString(/* None */0, /* None */0, /* None */0, Fs$LidcoreBsNode.readFileSync(configPath)));
}

function die(msg, _) {
  if (msg) {
    Logger$LidcoreDraco.error(msg[0]);
  }
  Logger$LidcoreDraco.error(usageMsg[0]);
  return Process$LidcoreBsNode.exit(1);
}

if (!Fs$LidcoreBsNode.existsSync(configPath)) {
  die(/* Some */["Couldn\'t find config file " + (String(configPath) + "")], /* () */0);
}

exports.argc = argc;
exports.argv = argv;
exports.baseDir = baseDir;
exports.usage = usage;
exports.configPath = configPath;
exports.config = config;
exports.die = die;
/* argv Not a pure module */
