// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");
var BsAsyncMonad = require("bs-async-monad/src/bsAsyncMonad.js");
var Fs$LidcoreBsNode = require("@lidcore/bs-node/src/fs.js");
var Utils$LidcoreDraco = require("../lib/utils.js");
var Logger$LidcoreDraco = require("../lib/logger.js");
var Spinner$LidcoreDraco = require("../bindings/spinner.js");
var Instances$LidcoreDraco = require("../lib/instances.js");

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -237546278,
    "Destroying"
  ],
  /* tuple */[
    816044828,
    "Creating"
  ],
  /* tuple */[
    938930095,
    "Restarting"
  ]
];

function die($staropt$star, _) {
  var msg = $staropt$star ? $staropt$star[0] : "Usage: draco [create|restart|destroy] /path/to/config.json";
  Logger$LidcoreDraco.error(msg);
  return process.exit(1);
}

var argc = process.argv.length;

if (argc !== 4) {
  die(/* None */0, /* () */0);
}

var match = Caml_array.caml_array_get(process.argv, 2);

var operation;

switch (match) {
  case "create" : 
      operation = /* Create */816044828;
      break;
  case "destroy" : 
      operation = /* Destroy */-237546278;
      break;
  case "restart" : 
      operation = /* Restart */938930095;
      break;
  default:
    operation = die(/* Some */["Invalid mode"], /* () */0);
}

var configPath = Caml_array.caml_array_get(process.argv, 3);

var config = Utils$LidcoreDraco.Json[/* parse_buf */1](Fs$LidcoreBsNode.readFileSync(configPath));

var fn = operation !== 816044828 ? (
    operation >= 938930095 ? Instances$LidcoreDraco.Config[/* restart */1] : Instances$LidcoreDraco.Config[/* destroy */2]
  ) : Instances$LidcoreDraco.Config[/* initialize */0];

var name = config.name;

var operation$1 = Js_mapperRt.binarySearch(3, operation, jsMapperConstantArray);

var spinner = Spinner$LidcoreDraco.init("" + (String(operation$1) + (" " + (String(name) + ".. %s"))));

Spinner$LidcoreDraco.start(spinner);

BsAsyncMonad.Callback[/* finish */27](/* None */0, BsAsyncMonad.Callback[/* &> */9](Curry._1(fn, config), (function () {
            Spinner$LidcoreDraco.stop(/* Some */[true], spinner);
            Curry._2(Printf.printf(/* Format */[
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* Char_literal */Block.__(12, [
                              /* " " */32,
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      ".. done!\n",
                                      /* End_of_format */0
                                    ])
                                ])
                            ])
                        ]),
                      "%s %s.. done!\n"
                    ]), operation$1, name);
            var partial_arg = BsAsyncMonad.Callback[/* return */0];
            return (function (param) {
                return partial_arg(/* () */0, param);
              });
          })));

/* argc Not a pure module */
