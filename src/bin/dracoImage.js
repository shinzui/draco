// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Fs$LidcoreBsNode = require("@lidcore/bs-node/src/fs.js");
var Tmp$LidcoreDraco = require("../bindings/tmp.js");
var Utils$LidcoreDraco = require("../lib/utils.js");
var Process$LidcoreBsNode = require("@lidcore/bs-node/src/process.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var DracoCommon$LidcoreDraco = require("./dracoCommon.js");
var Child_process$LidcoreBsNode = require("@lidcore/bs-node/src/child_process.js");

DracoCommon$LidcoreDraco.usage("image build [base|app|both]");

function getConfig(tmp, config, mode) {
  var path = "" + (String(DracoCommon$LidcoreDraco.baseDir) + ("/packer/" + (String(mode) + ".json")));
  var packerConfig = Utils$LidcoreDraco.Json[/* parse_buf */1](Fs$LidcoreBsNode.readFileSync(path));
  var match = config.image;
  if (!(match == null)) {
    var match$1 = match[mode];
    if (match$1 !== undefined) {
      var match$2 = match$1.provisioners;
      if (!(match$2 == null)) {
        packerConfig.provisioners = packerConfig.provisioners.concat(match$2);
      }
      
    }
    
  }
  var path$1 = Tmp$LidcoreDraco.make(/* None */0, /* None */0, /* Some */[".json"], tmp);
  Fs$LidcoreBsNode.writeFileSync(path$1, Utils$LidcoreDraco.Json[/* stringify */2](packerConfig));
  return path$1;
}

function packer(args, config, mode) {
  var tmp = Tmp$LidcoreDraco.init(/* None */0, /* () */0);
  var config$1 = Utils$LidcoreDraco.$$escape(getConfig(tmp, config, mode));
  var args$1 = List.map((function (param) {
          var opt = Utils$LidcoreDraco.$$escape("" + (String(param[0]) + ("=" + (String(param[1]) + ""))));
          return "-var " + (String(opt) + "");
        }), args);
  var args$2 = $$String.concat(" ", args$1);
  var stdio_000 = /* stdin : `Inherit */[
    -72987685,
    Process$LidcoreBsNode.stdin
  ];
  var stdio_001 = /* stdout : `Inherit */[
    -72987685,
    Process$LidcoreBsNode.stdout
  ];
  var stdio_002 = /* stderr : `Inherit */[
    -72987685,
    Process$LidcoreBsNode.stderr
  ];
  var stdio = /* record */[
    stdio_000,
    stdio_001,
    stdio_002
  ];
  var child = Child_process$LidcoreBsNode.spawn(/* None */0, /* None */0, /* Some */[stdio], /* Some */[true], "packer build -force " + (String(args$2) + (" " + (String(config$1) + ""))));
  return Child_process$LidcoreBsNode.on(child, /* `Exit */[
              771171134,
              (function () {
                  return Tmp$LidcoreDraco.cleanup(tmp);
                })
            ]);
}

if (DracoCommon$LidcoreDraco.argc !== 4) {
  DracoCommon$LidcoreDraco.die(/* None */0, /* () */0);
}

if (Caml_array.caml_array_get(DracoCommon$LidcoreDraco.argv, 2) !== "build") {
  DracoCommon$LidcoreDraco.die(/* None */0, /* () */0);
}

var match = Caml_array.caml_array_get(DracoCommon$LidcoreDraco.argv, 3);

var mode;

switch (match) {
  case "app" : 
      mode = /* App */3257473;
      break;
  case "base" : 
      mode = /* Base */736760881;
      break;
  case "both" : 
      mode = /* Both */737457313;
      break;
  default:
    mode = DracoCommon$LidcoreDraco.die(/* Some */["Invalid mode"], /* () */0);
}

var config = DracoCommon$LidcoreDraco.config(/* () */0);

var args_000 = /* tuple */[
  "project",
  config.projectId
];

var args_001 = /* :: */[
  /* tuple */[
    "zone",
    config.zone
  ],
  /* [] */0
];

var args = /* :: */[
  args_000,
  args_001
];

if (mode !== 736760881) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        [
          "dracoImage.ml",
          76,
          11
        ]
      ];
} else {
  packer(args, config, "base");
}

/*  Not a pure module */
