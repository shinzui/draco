// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Arg = require("bs-platform/lib/js/arg.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");
var BsAsyncMonad = require("bs-async-monad/src/bsAsyncMonad.js");
var Fs$LidcoreBsNode = require("@lidcore/bs-node/src/fs.js");
var Utils$LidcoreDraco = require("../lib/utils.js");
var Instances$LidcoreDraco = require("../lib/instances.js");

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -237546278,
    "Destroying"
  ],
  /* tuple */[
    816044828,
    "Creating"
  ],
  /* tuple */[
    938930095,
    "Restarting"
  ]
];

var usage = "Usage: draco [-create|-restart|-destroy] /path/to/config.json";

var operation = [/* Create */816044828];

var configPath = [""];

var args_000 = /* tuple */[
  "-create",
  /* Unit */Block.__(0, [(function () {
          operation[0] = /* Create */816044828;
          return /* () */0;
        })]),
  "Create instances (default)"
];

var args_001 = /* :: */[
  /* tuple */[
    "-restart",
    /* Unit */Block.__(0, [(function () {
            operation[0] = /* Restart */938930095;
            return /* () */0;
          })]),
    "Restart existing instances"
  ],
  /* :: */[
    /* tuple */[
      "-destroy",
      /* Unit */Block.__(0, [(function () {
              operation[0] = /* Destroy */-237546278;
              return /* () */0;
            })]),
      "Destroy existing cluster"
    ],
    /* [] */0
  ]
];

var args = /* :: */[
  args_000,
  args_001
];

function die($staropt$star, _) {
  var msg = $staropt$star ? $staropt$star[0] : usage;
  console.log(msg);
  return process.exit(1);
}

var argc = process.argv.length;

if (argc < 3) {
  die(/* None */0, /* () */0);
}

try {
  Arg.parse_argv(/* None */0, $$Array.sub(process.argv, 1, argc - 1 | 0), args, (function (path) {
          configPath[0] = path;
          return /* () */0;
        }), usage);
}
catch (raw_exn){
  var exn = Js_exn.internalToOCamlException(raw_exn);
  if (exn[0] === Arg.Help) {
    die(/* Some */[exn[1]], /* () */0);
  } else if (exn[0] === Arg.Bad) {
    die(/* Some */[exn[1]], /* () */0);
  } else {
    throw exn;
  }
}

if (configPath[0] === "") {
  die(/* None */0, /* () */0);
}

var config = Utils$LidcoreDraco.Json[/* parse_buf */1](Fs$LidcoreBsNode.readFileSync(configPath[0]));

var match = operation[0];

var fn = match !== 816044828 ? (
    match >= 938930095 ? Instances$LidcoreDraco.Config[/* restart */1] : Instances$LidcoreDraco.Config[/* destroy */2]
  ) : Instances$LidcoreDraco.Config[/* initialize */0];

var name = config.name;

var operation$1 = Js_mapperRt.binarySearch(3, operation[0], jsMapperConstantArray);

Curry._2(Printf.printf(/* Format */[
          /* String */Block.__(2, [
              /* No_padding */0,
              /* Char_literal */Block.__(12, [
                  /* " " */32,
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* String_literal */Block.__(11, [
                          "..",
                          /* End_of_format */0
                        ])
                    ])
                ])
            ]),
          "%s %s.."
        ]), operation$1, name);

BsAsyncMonad.Callback[/* finish */27](/* None */0, BsAsyncMonad.Callback[/* >| */7](Curry._1(fn, config), (function () {
            return Printf.printf(/* Format */[
                        /* String_literal */Block.__(11, [
                            " done!\n",
                            /* End_of_format */0
                          ]),
                        " done!\n"
                      ]);
          })));

/* argc Not a pure module */
