// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_sys = require("bs-platform/lib/js/caml_sys.js");
var Printexc = require("bs-platform/lib/js/printexc.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var BsAsyncMonad = require("bs-async-monad/src/bsAsyncMonad.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Env$LidcoreDraco = require("./lib/env.js");
var Os$LidcoreBsNode = require("@lidcore/bs-node/src/os.js");
var Redis$LidcoreDraco = require("./bindings/redis.js");
var Utils$LidcoreDraco = require("./lib/utils.js");
var Gcloud$LidcoreDraco = require("./bindings/gcloud.js");
var Logger$LidcoreDraco = require("./lib/logger.js");
var Firebase$LidcoreDraco = require("./bindings/firebase.js");
var Process$LidcoreBsNode = require("@lidcore/bs-node/src/process.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Express$LidcoreBsExpress = require("@lidcore/bs-express/src/express.js");

var offline;

try {
  offline = Caml_sys.caml_sys_getenv("OFFLINE_DEPLOY") === "true";
}
catch (exn){
  if (exn === Caml_builtin_exceptions.not_found) {
    offline = false;
  } else {
    throw exn;
  }
}

var error_handler = [(function () {
      return /* () */0;
    })];

function on_error(h) {
  error_handler[0] = h;
  return /* () */0;
}

var pubsub = Gcloud$LidcoreDraco.PubSub[/* init */0](/* None */0, /* () */0);

function requeue(msg, topic) {
  var match = msg.retry;
  var retry = (match == null) ? 1 : match + 1 | 0;
  msg.retry = retry;
  var msg$1 = Utils$LidcoreDraco.Json[/* stringify */2](msg);
  if (retry >= 10) {
    var partial_arg = new Error("[" + (String(topic) + ("] Message reached max retries: " + (String(msg$1) + ""))));
    var partial_arg$1 = BsAsyncMonad.Callback[/* fail */3];
    return (function (param) {
        return partial_arg$1(partial_arg, param);
      });
  } else {
    Logger$LidcoreDraco.info("Retrying message: " + (String(msg$1) + ""));
    return Gcloud$LidcoreDraco.PubSub[/* publish */1](pubsub, topic, msg$1);
  }
}

function wrap(error, cb) {
  return (function (err, ret) {
      if (err == null) {
        return cb(err, ret);
      } else if (err[0] === Js_exn.$$Error) {
        Curry._1(error_handler[0], err[1]);
        return Curry._1(error, cb);
      } else {
        var e;
        try {
          e = new Error(Printexc.to_string(err));
        }
        catch (exn){
          e = err;
        }
        Curry._1(error_handler[0], e);
        return Curry._1(error, cb);
      }
    });
}

var partial_arg = /* Some */[true];

function init(param) {
  return Express$LidcoreBsExpress.init(partial_arg, param);
}

function param(req, lbl) {
  return Js_primitive.undefined_to_opt(Express$LidcoreBsExpress.params(req)[lbl]);
}

var params = Express$LidcoreBsExpress.params;

var body = Express$LidcoreBsExpress.body;

function query(req) {
  var partial_arg = Express$LidcoreBsExpress.query(req);
  return (function (param) {
      return Js_primitive.undefined_to_opt(partial_arg[param]);
    });
}

var $$Error$1 = Caml_exceptions.create("Draco-LidcoreDraco.Functions.Http.Error");

function make_error(statusCode, body) {
  return [
          $$Error$1,
          {
            statusCode: statusCode,
            headers: null,
            body: body
          }
        ];
}

function error(code, msg) {
  var partial_arg = make_error(code, msg);
  var partial_arg$1 = BsAsyncMonad.Callback[/* fail */3];
  return (function (param) {
      return partial_arg$1(partial_arg, param);
    });
}

function response($staropt$star, headers, msg) {
  var code = $staropt$star ? $staropt$star[0] : 200;
  var headers$1;
  if (headers) {
    var headers$2 = { };
    Hashtbl.iter((function (param, param$1) {
            headers$2[param] = param$1;
            return /* () */0;
          }), headers[0]);
    headers$1 = headers$2;
  } else {
    headers$1 = null;
  }
  var match = JSON.stringify(msg);
  if (match !== undefined) {
    var partial_arg = {
      statusCode: code,
      headers: headers$1,
      body: match
    };
    var partial_arg$1 = BsAsyncMonad.Callback[/* return */2];
    return (function (param) {
        return partial_arg$1(partial_arg, param);
      });
  } else {
    var partial_arg_001 = {
      statusCode: 500,
      headers: null,
      body: "Invalid message!"
    };
    var partial_arg$2 = [
      $$Error$1,
      partial_arg_001
    ];
    var partial_arg$3 = BsAsyncMonad.Callback[/* fail */3];
    return (function (param) {
        return partial_arg$3(partial_arg$2, param);
      });
  }
}

function authenticate(req) {
  var token = offline ? "blabla" : Env$LidcoreDraco.get(/* None */0, "AUTHENTICATION_TOKEN");
  var error$1 = error(401, "Unauthorized");
  var match = Express$LidcoreBsExpress.headers(req)["authorization"];
  if (match !== undefined) {
    var re = (/Token token=(.+)/);
    var match$1 = re.exec(match);
    if (match$1 !== null && Caml_obj.caml_equal(Caml_array.caml_array_get(match$1, 1), token)) {
      var partial_arg = BsAsyncMonad.Callback[/* return */2];
      return (function (param) {
          return partial_arg(/* () */0, param);
        });
    } else {
      return error$1;
    }
  } else {
    return error$1;
  }
}

var send_response = (function (code, headers, body, resp) {
      var key;
      headers = headers || {};
      for (key in headers)
        resp.append(key, headers[key]);
      resp.status(code).send(body);
    });

function add_route(meth, $staropt$star, app, route, handler) {
  var auth = $staropt$star ? $staropt$star[0] : false;
  var match = meth !== 4004527 ? (
      meth >= 892711040 ? /* tuple */[
          "POST",
          Express$LidcoreBsExpress.post
        ] : /* tuple */[
          "GET",
          Express$LidcoreBsExpress.get
        ]
    ) : /* tuple */[
      "PUT",
      Express$LidcoreBsExpress.put
    ];
  var meth$1 = match[0];
  var handler$1 = function (req) {
    var tmp;
    if (auth) {
      tmp = authenticate(req);
    } else {
      var partial_arg = BsAsyncMonad.Callback[/* return */2];
      tmp = (function (param) {
          return partial_arg(/* () */0, param);
        });
    }
    return BsAsyncMonad.Callback[/* >> */5](tmp, (function () {
                  return Curry._1(handler, req);
                }));
  };
  return Curry._3(match[1], app, route, (function (req, resp) {
                var url = Express$LidcoreBsExpress.originalUrl(req);
                Logger$LidcoreDraco.info("Serving " + (String(meth$1) + (" " + (String(url) + ""))));
                var partial_arg = handler$1(req);
                return (function (param) {
                            var handler = partial_arg;
                            var cb = param;
                            var partial_arg$1 = {
                              statusCode: 500,
                              headers: null,
                              body: "Internal server error"
                            };
                            var partial_arg$2 = BsAsyncMonad.Callback[/* return */2];
                            var error = function (param) {
                              return partial_arg$2(partial_arg$1, param);
                            };
                            var cb$1 = wrap(error, cb);
                            return Curry._1(handler, (function (err, ret) {
                                          if (!(err == null) && err[0] === $$Error$1) {
                                            return cb$1(null, err[1]);
                                          } else {
                                            return cb$1(err, ret);
                                          }
                                        }));
                          })((function (err, ret) {
                              if (err == null) {
                                return Curry._4(send_response, ret.statusCode, ret.headers, ret.body, resp);
                              } else {
                                throw [
                                      Caml_builtin_exceptions.assert_failure,
                                      [
                                        "draco.ml",
                                        175,
                                        24
                                      ]
                                    ];
                              }
                            }));
              }));
}

function get(param, param$1, param$2, param$3) {
  return add_route(/* Get */3553398, param, param$1, param$2, param$3);
}

function post(param, param$1, param$2, param$3) {
  return add_route(/* Post */892711040, param, param$1, param$2, param$3);
}

function put(param, param$1, param$2, param$3) {
  return add_route(/* Put */4004527, param, param$1, param$2, param$3);
}

function $$export(app) {
  return Curry._1(Firebase$LidcoreDraco.Functions[/* Https */1][/* from_express */0], app);
}

function subscribe(topic, fn) {
  return Curry._2(Firebase$LidcoreDraco.Functions[/* PubSub */2][/* on_publish */0], topic, (function (message, _) {
                var json = Curry._1(Firebase$LidcoreDraco.Functions[/* PubSub */2][/* json */1], message);
                return BsAsyncMonad.Callback[/* to_promise */1](BsAsyncMonad.Callback[/* ||> */7](Curry._1(fn, json), (function (exn) {
                                  return BsAsyncMonad.Callback[/* >> */5](requeue(json, topic), (function () {
                                                var partial_arg = BsAsyncMonad.Callback[/* fail */3];
                                                return (function (param) {
                                                    return partial_arg(exn, param);
                                                  });
                                              }));
                                })));
              }));
}

var Event = /* module */[/* subscribe */subscribe];

function exceptionHandler(exn) {
  return Curry._1(error_handler[0], exn);
}

var instances = Hashtbl.create(/* None */0, 10);

function register(label, handler) {
  return Hashtbl.add(instances, label, handler);
}

function run() {
  var zone = Env$LidcoreDraco.get(/* Some */["us-west1-b"], "zone");
  var instance = Curry._2(Gcloud$LidcoreDraco.Compute[/* Zone */2][/* vm */0], Gcloud$LidcoreDraco.Compute[/* zone */3](Gcloud$LidcoreDraco.Compute[/* init */0](/* None */0, /* () */0), zone), Os$LidcoreBsNode.hostname(/* () */0));
  return BsAsyncMonad.Callback[/* finish */26](/* Some */[exceptionHandler], BsAsyncMonad.Callback[/* >> */5](Curry._1(Gcloud$LidcoreDraco.Compute[/* VM */1][/* getMetadata */0], instance), (function (meta) {
                    var items = $$Array.to_list(meta.metadata.items);
                    var data = List.find((function (el) {
                            return el.key === "draco_instance_type";
                          }), items);
                    var label = data.value;
                    Logger$LidcoreDraco.info("Starting instance " + (String(label) + ""));
                    var handler = Hashtbl.find(instances, label);
                    return Curry._1(handler, /* () */0);
                  })));
}

var stopping = [false];

Process$LidcoreBsNode.on(/* SIGTERM */-995060003, (function () {
        stopping[0] = true;
        return /* () */0;
      }));

var msg_check_expire = 60 * 24 * 2;

function msg_check_key(id) {
  return "msg_check_" + (String(id) + "");
}

var redis = Redis$LidcoreDraco.createClient(Env$LidcoreDraco.get(/* Some */["redis://localhost:6379"], "REDIS_URL"));

function is_duplicate(id) {
  var key = msg_check_key(id);
  return BsAsyncMonad.Callback[/* >> */5]((function (param) {
                return Redis$LidcoreDraco.setnx(redis, key, "foo", param);
              }), (function (n) {
                if (n === 0) {
                  var partial_arg = BsAsyncMonad.Callback[/* return */2];
                  return (function (param) {
                      return partial_arg(true, param);
                    });
                } else {
                  return BsAsyncMonad.Callback[/* >| */9]((function (param) {
                                return Redis$LidcoreDraco.expire(redis, key, msg_check_expire, param);
                              }), (function () {
                                return false;
                              }));
                }
              }));
}

function log(msg) {
  return Logger$LidcoreDraco.info("" + (String(msg) + ""));
}

function subscribe$1(maxMessages, topic, subscription, handler) {
  var pubsub = Gcloud$LidcoreDraco.PubSub[/* init */0](/* None */0, /* () */0);
  var flowControl = {
    maxMessages: maxMessages
  };
  var config = {
    flowControl: flowControl
  };
  var requeue$1 = function (msg) {
    var msg$1 = Utils$LidcoreDraco.Json[/* parse_buf */1](msg.data);
    return requeue(msg$1, topic);
  };
  var requeue$2 = function (msg) {
    return BsAsyncMonad.Callback[/* ||> */7](requeue$1(msg), (function (exn) {
                  Curry._1(error_handler[0], exn);
                  var partial_arg = BsAsyncMonad.Callback[/* return */2];
                  return (function (param) {
                      return partial_arg(/* () */0, param);
                    });
                }));
  };
  return BsAsyncMonad.Callback[/* >| */9](Gcloud$LidcoreDraco.PubSub[/* subscription */3](config, topic, pubsub, subscription), (function (s) {
                return Gcloud$LidcoreDraco.PubSub[/* subscribe */6](s, (function (msg) {
                              if (stopping[0]) {
                                return Gcloud$LidcoreDraco.PubSub[/* nack */5](msg);
                              } else {
                                var handler$1 = function () {
                                  return BsAsyncMonad.Callback[/* >| */9](Curry._1(handler, msg.data), (function () {
                                                return Gcloud$LidcoreDraco.PubSub[/* ack */4](msg);
                                              }));
                                };
                                var id = msg.id;
                                var handler$2 = BsAsyncMonad.Callback[/* >> */5](is_duplicate(id), (function (ret) {
                                        if (ret) {
                                          log("Found duplicate message with id: " + (String(id) + ""));
                                          Gcloud$LidcoreDraco.PubSub[/* ack */4](msg);
                                          var partial_arg = BsAsyncMonad.Callback[/* return */2];
                                          return (function (param) {
                                              return partial_arg(/* () */0, param);
                                            });
                                        } else {
                                          return BsAsyncMonad.Callback[/* ||> */7](handler$1(/* () */0), (function (exn) {
                                                        Gcloud$LidcoreDraco.PubSub[/* ack */4](msg);
                                                        return BsAsyncMonad.Callback[/* >> */5](requeue$2(msg), (function () {
                                                                      var partial_arg = BsAsyncMonad.Callback[/* fail */3];
                                                                      return (function (param) {
                                                                          return partial_arg(exn, param);
                                                                        });
                                                                    }));
                                                      }));
                                        }
                                      }));
                                return BsAsyncMonad.Callback[/* finish */26](/* Some */[exceptionHandler], handler$2);
                              }
                            }));
              }));
}

var Functions_000 = [
  body,
  param,
  params,
  query,
  response,
  error,
  init,
  get,
  post,
  put,
  $$export
];

var Functions = [
  Functions_000,
  Event
];

var Instances = [
  register,
  run,
  subscribe$1
];

exports.offline = offline;
exports.requeue = requeue;
exports.on_error = on_error;
exports.Functions = Functions;
exports.Instances = Instances;
/* offline Not a pure module */
