// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var BsAsyncMonad = require("bs-async-monad/src/bsAsyncMonad.js");
var Env$LidcoreDraco = require("../lib/env.js");
var Js_null_undefined = require("bs-platform/lib/js/js_null_undefined.js");
var Pubsub = require("@google-cloud/pubsub");
var Buffer$LidcoreBsNode = require("@lidcore/bs-node/src/buffer.js");
var Compute = require("@google-cloud/compute");

var project = Env$LidcoreDraco.get(/* Some */["draco-dev"], "PROJECT");

var default_config = {
  projectId: project
};

function init($staropt$star, _) {
  return new Pubsub($staropt$star ? $staropt$star[0] : default_config);
}

function get_topic(pubsub, name) {
  var partial_arg = pubsub.topic(name);
  var partial_arg$1 = BsAsyncMonad.Callback[/* return */0];
  return (function (param) {
      return partial_arg$1(partial_arg, param);
    });
}

function subscription(config, topic, client, name) {
  return BsAsyncMonad.Callback[/* >> */3](get_topic(client, topic), (function (topic) {
                var subscription = topic.subscription(name, config);
                return BsAsyncMonad.Callback[/* >> */3]((function (param) {
                              subscription.exists(param);
                              return /* () */0;
                            }), (function (ret) {
                              var tmp;
                              if (ret) {
                                var partial_arg = BsAsyncMonad.Callback[/* return */0];
                                tmp = (function (param) {
                                    return partial_arg(/* () */0, param);
                                  });
                              } else {
                                tmp = (function (param) {
                                    subscription.create(param);
                                    return /* () */0;
                                  });
                              }
                              return BsAsyncMonad.Callback[/* >> */3](tmp, (function () {
                                            var partial_arg = BsAsyncMonad.Callback[/* return */0];
                                            return (function (param) {
                                                return partial_arg(subscription, param);
                                              });
                                          }));
                            }));
              }));
}

function subscribe(subscription, handler) {
  subscription.on("message", handler);
  return /* () */0;
}

function publish(client, name, data) {
  var data$1 = Buffer$LidcoreBsNode.from(/* None */0, data);
  return BsAsyncMonad.Callback[/* >> */3](get_topic(client, name), (function (topic) {
                var publisher = topic.publisher();
                return (function (param) {
                    publisher.publish(data$1, param);
                    return /* () */0;
                  });
              }));
}

function publishBatch(projectId, topic, messages) {
  var client = new (Pubsub.v1.PublisherClient)();
  var topic$1 = client.topicPath(projectId, topic);
  var messages$1 = $$Array.map((function (msg) {
          return {
                  data: Buffer$LidcoreBsNode.from(/* None */0, msg)
                };
        }), messages);
  var request = {
    topic: topic$1,
    messages: messages$1
  };
  return (function (param) {
      client.publish(request, param);
      return /* () */0;
    });
}

function init$1($staropt$star, _) {
  return new Compute($staropt$star ? $staropt$star[0] : default_config);
}

function pushInterceptor(c, x) {
  c.interceptors.push(x);
  return /* () */0;
}

function createInstanceGroupManager(options, targetSize, instanceTemplate, t, name) {
  var options$1 = Js_null_undefined.fromOption(options);
  return (function (param) {
      t.createInstanceGroupManager(name, instanceTemplate, targetSize, options$1, param);
      return /* () */0;
    });
}

function PubSub_004(prim) {
  prim.ack();
  return /* () */0;
}

function PubSub_005(prim) {
  prim.nack();
  return /* () */0;
}

var PubSub = [
  init,
  publish,
  publishBatch,
  subscription,
  PubSub_004,
  PubSub_005,
  subscribe
];

var Compute_002 = [
  (function (prim, prim$1) {
      prim.exists(prim$1);
      return /* () */0;
    }),
  (function (prim, prim$1) {
      prim.get(prim$1);
      return /* () */0;
    }),
  (function (prim, prim$1) {
      prim.delete(prim$1);
      return /* () */0;
    })
];

function Compute_003(prim, prim$1) {
  return prim.instanceTemplate(prim$1);
}

function Compute_004(prim, prim$1, prim$2, prim$3) {
  prim.createInstanceTemplate(prim$1, prim$2, prim$3);
  return /* () */0;
}

var Compute_005 = [
  [
    (function (prim, prim$1) {
        prim.exists(prim$1);
        return /* () */0;
      }),
    (function (prim, prim$1) {
        prim.delete(prim$1);
        return /* () */0;
      })
  ],
  (function (prim, prim$1) {
      return prim.autoscaler(prim$1);
    }),
  (function (prim, prim$1, prim$2, prim$3) {
      prim.createAutoscaler(prim$1, prim$2, prim$3);
      return /* () */0;
    }),
  [
    (function (prim, prim$1) {
        prim.exists(prim$1);
        return /* () */0;
      }),
    (function (prim, prim$1) {
        prim.get(prim$1);
        return /* () */0;
      }),
    (function (prim, prim$1) {
        prim.delete(prim$1);
        return /* () */0;
      }),
    (function (prim, prim$1) {
        prim.recreateVMs(prim$1);
        return /* () */0;
      })
  ],
  (function (prim, prim$1) {
      return prim.instanceGroupManager(prim$1);
    }),
  createInstanceGroupManager,
  [(function (prim, prim$1) {
        prim.getMetadata(prim$1);
        return /* () */0;
      })],
  (function (prim, prim$1) {
      return prim.vm(prim$1);
    })
];

function Compute_006(prim, prim$1) {
  return prim.zone(prim$1);
}

var Compute$1 = [
  init$1,
  pushInterceptor,
  Compute_002,
  Compute_003,
  Compute_004,
  Compute_005,
  Compute_006
];

exports.project = project;
exports.default_config = default_config;
exports.PubSub = PubSub;
exports.Compute = Compute$1;
/* project Not a pure module */
